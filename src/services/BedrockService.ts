import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime';
import { BedrockImageResult } from '../types';
import { BEDROCK_MODELS, COLORING_BOOK_PROMPT_TEMPLATE, COLORING_BOOK_PROMPT_TEMPLATE_DE } from '../utils/constants';

export class BedrockService {
  private client: BedrockRuntimeClient;
  
  constructor() {
    this.client = new BedrockRuntimeClient({
      region: process.env.AWS_REGION || 'us-east-1',
    });
  }

  async generateColoringPage(description: string, language: 'en' | 'de'): Promise<BedrockImageResult> {
    try {
      // Enhance the prompt for coloring book style
      const enhancedPrompt = this.enhancePromptForColoringBook(description, language);
      
      // Use Titan Image Generator G1 as primary model
      const modelId = BEDROCK_MODELS.TITAN_IMAGE;
      
      const requestBody = {
        taskType: 'TEXT_IMAGE',
        textToImageParams: {
          text: enhancedPrompt,
          negativeText: 'color, colored, shading, shadows, gradients, realistic, photographic, complex background, text, words, letters',
        },
        imageGenerationConfig: {
          numberOfImages: 1,
          height: 1024,
          width: 1024,
          cfgScale: 8.0,
          seed: Math.floor(Math.random() * 1000000),
        },
      };

      const command = new InvokeModelCommand({
        modelId,
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify(requestBody),
      });

      const response = await this.client.send(command);
      
      if (!response.body) {
        throw new Error('No response body from Bedrock');
      }

      const responseBody = JSON.parse(new TextDecoder().decode(response.body));
      
      if (!responseBody.images || responseBody.images.length === 0) {
        throw new Error('No images generated by Bedrock');
      }

      const imageBase64 = responseBody.images[0];
      const seed = requestBody.imageGenerationConfig.seed;

      return {
        imageBase64,
        modelId,
        seed,
        isContentFiltered: false
      };
    } catch (error) {
      console.error('Error generating image with Bedrock:', error);
      throw new Error(`Failed to generate coloring page: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async modifyColoringPage(
    originalDescription: string,
    modifications: string,
    language: 'en' | 'de',
    originalSeed?: number
  ): Promise<BedrockImageResult> {
    try {
      // Combine original description with modifications
      const combinedDescription = language === 'de'
        ? `${originalDescription}, ${modifications}`
        : `${originalDescription}, ${modifications}`;

      // Use a similar seed for consistency if provided
      const seed = originalSeed ? originalSeed + Math.floor(Math.random() * 100) : Math.floor(Math.random() * 1000000);
      
      const enhancedPrompt = this.enhancePromptForColoringBook(combinedDescription, language);
      const modelId = BEDROCK_MODELS.TITAN_IMAGE;
      
      const requestBody = {
        taskType: 'TEXT_IMAGE',
        textToImageParams: {
          text: enhancedPrompt,
          negativeText: 'color, colored, shading, shadows, gradients, realistic, photographic, complex background, text, words, letters',
        },
        imageGenerationConfig: {
          numberOfImages: 1,
          height: 1024,
          width: 1024,
          cfgScale: 8.0,
          seed,
        },
      };

      const command = new InvokeModelCommand({
        modelId,
        contentType: 'application/json',
        accept: 'application/json',
        body: JSON.stringify(requestBody),
      });

      const response = await this.client.send(command);
      
      if (!response.body) {
        throw new Error('No response body from Bedrock');
      }

      const responseBody = JSON.parse(new TextDecoder().decode(response.body));
      
      if (!responseBody.images || responseBody.images.length === 0) {
        throw new Error('No images generated by Bedrock');
      }

      const imageBase64 = responseBody.images[0];

      return {
        imageBase64,
        modelId,
        seed,
        isContentFiltered: false,
      };
    } catch (error) {
      console.error('Error modifying image with Bedrock:', error);
      throw new Error(`Failed to modify coloring page: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  enhancePromptForColoringBook(description: string, language: 'en' | 'de'): string {
    const template = language === 'de' ? COLORING_BOOK_PROMPT_TEMPLATE_DE : COLORING_BOOK_PROMPT_TEMPLATE;
    return template.replace('{description}', description);
  }


}